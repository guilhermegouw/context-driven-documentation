metadata:
  feature: "new-command"
  status: "in-progress"
  owner: "core"
  created: "2025-10-27"
  updated: "2025-10-27"

overview: |
  The 'new' command creates a new feature specification from a template
  and automatically generates its corresponding Claude Code command file.
  
  This makes it instant and easy to add new features to a project with
  consistent structure and immediate AI assistant integration.

capabilities:
  - "Create feature spec from template with one command"
  - "Auto-generate Claude Code command from the new spec"
  - "Validate feature name format (lowercase-with-hyphens)"
  - "Prevent accidental overwrites (check for existing features)"
  - "Provide clear success feedback with file locations"

workflows:
  - name: "create_new_feature"
    trigger: "User runs 'cdd new feature-name'"
    steps:
      - "Validate feature name (lowercase, hyphens only, starts with letter)"
      - "Check if .cddoc/templates/feature.yaml exists (are we in a CDD project?)"
      - "Check if feature spec already exists in specs/features/"
      - "Copy template from .cddoc/templates/feature.yaml"
      - "Replace placeholder 'feature-name' with actual name in template"
      - "Update metadata dates to current timestamp"
      - "Save to specs/features/{name}.yaml"
      - "Generate .claude/commands/{name}.md from the YAML spec"
      - "Display success message with file paths and next steps"
  
  - name: "force_overwrite_feature"
    trigger: "User runs 'cdd new feature-name --force'"
    steps:
      - "Validate feature name"
      - "Check if CDD project"
      - "Warn user about overwriting existing feature"
      - "Proceed with template copy (overwrite mode)"
      - "Regenerate command file"
      - "Display success message"

business_rules:
  - "Feature names must be lowercase with hyphens (e.g., 'user-auth', 'api-v2')"
  - "Feature names must start with a letter (not a number or hyphen)"
  - "No spaces, underscores, or special characters allowed in names"
  - "No consecutive hyphens (e.g., 'user--auth' is invalid)"
  - "Must not overwrite existing features without --force flag"
  - "Template must exist at .cddoc/templates/feature.yaml"
  - "Generated command should be immediately usable in Claude Code"
  - "If not in a CDD project, show helpful error and suggest 'cdd init'"

edge_cases:
  - "Feature already exists - show error with feature name, suggest using --force or different name"
  - "Invalid feature name - show error with the invalid name and valid examples"
  - "Template missing - show error suggesting CDD installation might be corrupted or need to run 'cdd init'"
  - "No write permission - show clear permission error for the specific directory"
  - "Not in a CDD project - suggest running 'cdd init .' first"
  - "Feature name too long (>100 chars) - reject with helpful message"
  - "Empty feature name - show usage help"

interfaces:
  cli_commands:
    - "cdd new {feature-name} — Create new feature spec and command"
  
  arguments:
    - name: "feature_name"
      type: "string"
      required: true
      description: "Name of the feature (lowercase-with-hyphens)"
  
  options:
    - name: "--force"
      type: "flag"
      description: "Overwrite existing feature if it exists"
  
  exit_codes:
    - code: 0
      meaning: "Success - feature created and command generated"
    - code: 1
      meaning: "Error - invalid name, file operation failed, or not in CDD project"
    - code: 2
      meaning: "Error - feature exists and --force not specified"

dependencies:
  required:
    - "pathlib - Path manipulation and file operations"
    - "pyyaml - YAML parsing and generation"
    - "rich - Beautiful CLI output (tables, panels, colors)"
    - "re - Regular expression for name validation"
    - "datetime - Timestamp generation for metadata"

implementation_notes: |
  Key implementation considerations:
  
  1. Name Validation:
     - Pattern: ^[a-z][a-z0-9-]*$
     - Must start with letter, allow numbers and hyphens
     - Check for consecutive hyphens separately
     - Max length 100 chars
     - Reserved names: init, new, generate, validate, status, sync
  
  2. CDD Project Detection:
     - Check if .cddoc/templates/feature.yaml exists
     - If not, error with "Run 'cdd init .' first"
  
  3. Template Processing:
     - Read .cddoc/templates/feature.yaml
     - Replace 'feature-name' placeholder with actual name
     - Update date placeholders to current date (YYYY-MM-DD format)
     - Write to specs/features/{name}.yaml
  
  4. Command Generation from YAML:
     - Parse the created YAML spec
     - Extract sections: overview, capabilities, workflows, business rules, edge cases
     - Format as markdown with proper headers
     - Include metadata footer (auto-generated, source file, date)
     - Save to .claude/commands/{name}.md
  
  5. Error Handling:
     - Follow same pattern as init.py
     - Custom NewCommandError exception
     - Rich formatted errors with actionable suggestions
     - Clear exit codes
  
  6. Success Output:
     - Use Rich Panel for success message
     - Show both created file paths
     - Provide next steps in formatted panel
     - Use emojis for visual clarity

security:
  - "Validate feature name to prevent directory traversal"
  - "Sanitize all user input before file operations"
  - "Never execute feature name as shell command"
  - "Verify write permissions before creating files"

performance:
  - "Should complete in <1 second for feature creation"
  - "No external API calls or network requests"
  - "Single file read (template), two file writes (spec + command)"

example_usage: |
  # Create a new feature
  $ cdd new user-authentication
  
  🎯 Creating Feature Specification
  
  ✅ Created specs/features/user-authentication.yaml
  ✅ Generated .claude/commands/user-authentication.md
  
  ╭─────────────── Next Steps ───────────────╮
  │                                           │
  │ 1. 📝 Edit the spec:                      │
  │    specs/features/user-authentication... │
  │                                           │
  │ 2. 🤖 Use with Claude Code:               │
  │    /user-authentication                   │
  │                                           │
  │ 3. 💻 Start implementing:                 │
  │    Follow the workflows in your spec      │
  │                                           │
  ╰───────────────────────────────────────────╯
  
  
  # Try to create duplicate (error)
  $ cdd new user-authentication
  
  ❌ Error: Feature 'user-authentication' already exists
  
  Use --force to overwrite or choose a different name:
    cdd new user-authentication --force
    cdd new user-auth-v2
  
  
  # Invalid name (error)
  $ cdd new User_Auth
  
  ❌ Error: Invalid feature name 'User_Auth'
  
  Feature names must be lowercase with hyphens.
  
  Valid examples:
    ✅ user-auth
    ✅ payment-processing  
    ✅ api-v2
  
  
  # Not in CDD project (error)
  $ cd /tmp/random-dir
  $ cdd new my-feature
  
  ❌ Error: Not in a CDD project directory
  
  Run this first to initialize CDD structure:
    cdd init .

test_cases:
  - scenario: "Create feature with valid name"
    steps:
      - "Run 'cdd new test-feature'"
      - "Verify specs/features/test-feature.yaml exists"
      - "Verify .claude/commands/test-feature.md exists"
      - "Verify YAML is valid"
      - "Verify markdown has proper structure"
    expected: "Exit code 0, both files created"
  
  - scenario: "Reject invalid name (uppercase)"
    steps:
      - "Run 'cdd new Test-Feature'"
    expected: "Exit code 1, helpful error message with examples"
  
  - scenario: "Reject invalid name (underscore)"
    steps:
      - "Run 'cdd new test_feature'"
    expected: "Exit code 1, helpful error message"
  
  - scenario: "Reject consecutive hyphens"
    steps:
      - "Run 'cdd new test--feature'"
    expected: "Exit code 1, error about consecutive hyphens"
  
  - scenario: "Prevent duplicate without force"
    steps:
      - "Run 'cdd new test-feature' (first time)"
      - "Run 'cdd new test-feature' (second time)"
    expected: "First succeeds, second fails with exit code 2"
  
  - scenario: "Allow overwrite with force"
    steps:
      - "Run 'cdd new test-feature'"
      - "Run 'cdd new test-feature --force'"
    expected: "Both succeed, second overwrites first"
  
  - scenario: "Reject when not in CDD project"
    steps:
      - "Create empty temp directory"
      - "Run 'cdd new test-feature'"
    expected: "Exit code 1, error suggesting 'cdd init'"

open_questions:
  - "Should we support multiple template types (basic, advanced, minimal)?"
  - "Should we auto-open the created spec in $EDITOR after creation?"
  - "Should we add a --dry-run flag to preview what would be created?"

success_metrics:
  - "Can create feature spec in <1 second from command execution"
  - "Generated command file is valid markdown and loads in Claude Code"
  - "Clear error messages for all failure cases"
  - "Users understand next steps from success output"

sync_metadata:
  last_synced: null
  sync_count: 0
  last_commit: null
