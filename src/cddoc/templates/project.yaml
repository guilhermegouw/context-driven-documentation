# Auto-generated by cdd init
# This file describes your project's architecture, constraints, and conventions

project:
  name: "my-project"
  description: "A brief description of what this project does"

  # Primary programming language(s) and frameworks
  tech_stack:
    - language: "Python"
      version: "3.9+"
    # - language: "JavaScript"
    #   framework: "React"

  # Project-wide architectural decisions
  architecture:
    style: "modular"  # monolithic, microservices, modular, etc.
    patterns:
      - "MVC"
      # - "Repository Pattern"
      # - "Dependency Injection"

  # Code conventions and standards
  conventions:
    code_style: "PEP 8"  # Replace with your style guide
    naming:
      files: "snake_case"
      classes: "PascalCase"
      functions: "snake_case"
      variables: "snake_case"

    # Testing requirements
    testing:
      required: true
      coverage_minimum: 80
      frameworks:
        - "pytest"

    # Documentation requirements
    documentation:
      docstrings: "Google style"  # Google, NumPy, Sphinx, etc.
      inline_comments: "Explain why, not what"

  # Project constraints and non-negotiables
  constraints:
    # - "Must support Python 3.9+"
    # - "Must be backwards compatible"
    # - "No external API calls in core logic"
    # - "All user data must be encrypted"

  # Key directories and their purposes
  structure:
    src: "Source code"
    tests: "Test files"
    docs: "Documentation"
    specs: "Feature specifications"

  # Dependencies and their purposes
  dependencies:
    # core:
    #   - name: "requests"
    #     purpose: "HTTP client for API calls"
    # dev:
    #   - name: "pytest"
    #     purpose: "Testing framework"

  # Common gotchas and pitfalls
  gotchas:
    # - "Remember to run migrations after schema changes"
    # - "Cache must be cleared when updating config"
    # - "Environment variables required for API access"

# AI Assistant Guidelines
# When implementing features:
# 1. Follow the conventions defined above
# 2. Respect project constraints
# 3. Maintain consistency with existing code
# 4. Write tests according to testing requirements
# 5. Document according to documentation standards
